# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

import re

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
sys.path.insert(0, os.path.abspath('../'))

# -- Project information -----------------------------------------------------

project = 'ladybug'
copyright = '2019, Ladybug Tools'
author = 'Ladybug Tools'

# The short X.Y version
version = ''

# The full version, including alpha/beta/rc tags
release = ''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.imgmath',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
	'sphinxcontrib.fulltoc',
	'sphinx.ext.napoleon'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
import sphinx_bootstrap_theme

# html_theme = 'alabaster'
html_theme = 'bootstrap'
html_theme_path = sphinx_bootstrap_theme.get_html_theme_path()

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    # For black navbar, do "navbar navbar-inverse"
    'navbar_class': "navbar navbar-inverse",
    # Fix navigation bar to top of page?
    # Values: "true" (default) or "false"
    'navbar_fixed_top': "true",
    'navbar_pagenav': True,
    'source_link_position': "nav",
    'bootswatch_theme': "united",
    'bootstrap_version': "3",
}

# on_rtd is whether we are on readthedocs.org
# on_rtd = os.environ.get('READTHEDOCS', None) == 'True'

# if not on_rtd:  # only import and set the theme if we're building docs locally
#    import sphinx_rtd_theme
#    html_theme = 'sphinx_rtd_theme'
#    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
html_sidebars = {
    '**': ['localtoc.html']
}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'ladybugdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'ladybug.tex', 'ladybug Documentation',
     'Ladybug Tools', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'ladybug', 'ladybug Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'ladybug', 'ladybug Documentation',
     author, 'ladybug', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for autodoc extension --------------------------------------------
autodoc_default_options = {
    'inherited-members': True,
}

autodoc_member_order = 'groupwise'


# Autodoc event handlers
def autodoc_process_docstring(app, what, name, obj, options, lines):
    """Function to handle the autodoc-process-docstring event.

    Emitted when autodoc has read and processed a docstring. lines is a list of
    strings – the lines of the processed docstring – that the event handler
    can modify in place to change what Sphinx puts into the output.

    More information on sphinx documentation:
        http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html
        #event-autodoc-process-docstring

    Args:
        app: the Sphinx application object
        what: the type of the object which the docstring belongs to (one of "module",
            "class", "exception", "function", "method", "attribute")
        name: the fully qualified name of the object
        obj: the object itself
        options: the options given to the directive: an object with attributes
            inherited_members, undoc_members, show_inheritance and noindex that
            are true if the flag option of same name was given to the auto directive
        lines: the lines of the docstring
    """

    # Make class properties display matching the 'Args' format
    if what == 'class':
        make_properties_one_liner(lines)
        make_fields_bolded(lines)

    return lines


def make_properties_one_liner(lines):
    """Ensures that lines with the 'field: value' format that extend multiple
    lines are merged into a single line. The multiline properties display secondary
    lines incorrectly when field is made bolded.

    Args:
        lines: the lines of the docstring
    """

    # Connect the list strings into a single string
    doc_text = "\n".join(lines) + "\n"

    # Generate groups based on three possible line formats:
    # 1: new line (\n)
    # 2: Bulleted field: value (?:(\s*\*\s*)(\w+)(\s*:)([^\n]+)\n)
    # 3: Any other string: (?:(\s*)([^\n]+)\n)
    matches = re.findall(
        r"(\n)|(?:(\s*\*\s*)(\w+)(\s*:)([^\n]+)\n)|(?:(\s*)([^\n]+)\n)", doc_text)

    # Traverse groups to detect and join multilined field:value cases
    i, field_i = 0, -1
    while i < len(matches):
        group = matches[i]
        # Check for bulleted field:value line and track line index
        if "*" in group[1]:
            field_i = i
        # Check if it is next line of field:value line(not bulleted & text vertically
        # aligned)
        # Connect this line's text group to parent field:value line
        elif group[6] != '' and field_i >= 0 and group[6].lstrip()[0] != "*" and \
                len(group[5]) == len(matches[field_i][1]):
            lines[field_i] = lines[field_i] + ' ' + group[6]
            lines[i] = ""
        # If not aligned text line or empty line reset field:value line index
        else:
            field_i = -1
        # Loop through every line match
        i += 1


def make_fields_bolded(lines):
    """Make field font bolded in 'field: value' line format.

    Note the purpose of this change is to match the class 'Parameters'
    and 'Args' fields format.
    Regex pattern "(\s*\*\s*)(\w+)(\s*:)(.+)" detects range of 'field: value'
    formats.

    Args:
        lines: the lines of the docstring
    """

    # Include boldface (reST inline markup '**') in field names of matching lines
    def replace(match):
        return "{0[0]} **{0[1]}** --{0[3]}".format(match.groups())

    # Substitute macthing lines
    new_lines = [re.sub(r"(\s*\*\s*)(\w+)(\s*:)(.+)", replace, line) for line in lines]

    # Copy changes back to lines (in place)
    for i in range(len(lines)):
        lines[i] = new_lines[i]


def setup(app):
    """Run custom code with access to the Shinx application object

    Args:
        app: the Sphinx application object
    """
    # Register the event handler for 'autodoc-process-docstring' event
    app.connect('autodoc-process-docstring', autodoc_process_docstring)

    # Add bootstrap theme custom stylesheet
    app.add_stylesheet("custom.css")
